const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
const scoreElement = document.getElementById('score');
const gameOverElement = document.getElementById('game-over');
const finalScoreElement = document.getElementById('final-score');

// Game constants
const SIZE = 40;
const CANVAS_WIDTH = 1000;
const CANVAS_HEIGHT = 800;

// Game state
let snake, apple, direction, gameLoop;

// Images (you'll need to replace these with actual image URLs or base64 encoded images)
const blockImage = new Image();
blockImage.src = 'block.jpg';
const appleImage = new Image();
appleImage.src = 'apple.jpg';

function initGame() {
    snake = {
        length: 1,
        x: [40],
        y: [40],
        direction: 'down'
    };
    
    apple = {
        x: 120,
        y: 120
    };

    direction = 'down';
    scoreElement.textContent = `Score: ${snake.length}`;
    gameOverElement.style.display = 'none';
}

function drawBackground() {
    ctx.fillStyle = 'rgb(110, 110, 5)';
    ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);
}

function drawSnake() {
    for (let i = 0; i < snake.length; i++) {
        ctx.drawImage(blockImage, snake.x[i], snake.y[i]);
    }
}

function drawApple() {
    ctx.drawImage(appleImage, apple.x, apple.y);
}

function moveSnake() {
    // Update body
    for (let i = snake.length - 1; i > 0; i--) {
        snake.x[i] = snake.x[i-1];
        snake.y[i] = snake.y[i-1];
    }

    // Update head
    switch (snake.direction) {
        case 'left':
            snake.x[0] -= SIZE;
            break;
        case 'right':
            snake.x[0] += SIZE;
            break;
        case 'up':
            snake.y[0] -= SIZE;
            break;
        case 'down':
            snake.y[0] += SIZE;
            break;
    }
}

function checkCollision() {
    // Check apple collision
    if (isCollision(snake.x[0], snake.y[0], apple.x, apple.y)) {
        snake.length++;
        snake.x.push(-1);
        snake.y.push(-1);
        moveApple();
        scoreElement.textContent = `Score: ${snake.length}`;
    }

    // Check self collision
    for (let i = 3; i < snake.length; i++) {
        if (isCollision(snake.x[0], snake.y[0], snake.x[i], snake.y[i])) {
            endGame();
        }
    }

    // Check boundary collision
    if (snake.x[0] < 0 || snake.x[0] >= CANVAS_WIDTH || 
        snake.y[0] < 0 || snake.y[0] >= CANVAS_HEIGHT) {
        endGame();
    }
}

function isCollision(x1, y1, x2, y2) {
    return x1 < x2 + SIZE && x1 + SIZE > x2 &&
           y1 < y2 + SIZE && y1 + SIZE > y2;
}

function moveApple() {
    apple.x = Math.floor(Math.random() * 25) * SIZE;
    apple.y = Math.floor(Math.random() * 20) * SIZE;
}

function gameUpdate() {
    drawBackground();
    moveSnake();
    checkCollision();
    drawSnake();
    drawApple();
}

function endGame() {
    clearInterval(gameLoop);
    finalScoreElement.textContent = `Score: ${snake.length}`;
    gameOverElement.style.display = 'block';
}

function restartGame() {
    initGame();
    startGame();
}

function startGame() {
    gameLoop = setInterval(gameUpdate, 250);
}

// Keyboard controls
document.addEventListener('keydown', (e) => {
    switch(e.key) {
        case 'ArrowLeft':
            if (snake.direction !== 'right') snake.direction = 'left';
            break;
        case 'ArrowRight':
            if (snake.direction !== 'left') snake.direction = 'right';
            break;
        case 'ArrowUp':
            if (snake.direction !== 'down') snake.direction = 'up';
            break;
        case 'ArrowDown':
            if (snake.direction !== 'up') snake.direction = 'down';
            break;
    }
});

// Initialize and start the game
initGame();
startGame();
